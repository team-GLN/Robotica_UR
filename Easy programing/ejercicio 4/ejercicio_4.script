def ejercicio_4():
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.15,0.0,0.0,1.5707963267948966])
  set_payload(3.0)
  set_gravity([0.0, -1.2026031567627009E-15, -9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  step_count_a7ef8ab1_a99a_4099_94e3_dddac349c925 = 0.0
  thread Step_Counter_Thread_3d872533_e159_4579_9dd7_2f7695ff06e7():
    while (True):
      step_count_a7ef8ab1_a99a_4099_94e3_dddac349c925 = step_count_a7ef8ab1_a99a_4099_94e3_dddac349c925 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_3d872533_e159_4579_9dd7_2f7695ff06e7()
  while (True):
    $ 1 "Robot Program"
    $ 2 "variables"
    $ 3 "pi≔3.1416"
    global pi=3.1416
    $ 4 "parametros rejilla"
    $ 5 "distancia≔0.05"
    global distancia=0.05
    $ 6 "columnas≔3"
    global columnas=3
    $ 7 "filas≔2"
    global filas=2
    $ 8 "puntos"
    $ 9 "safe_point≔[0,-pi/8,-5*pi/8,-3*pi/4,pi/2,0]"
    global safe_point=[0,-pi/8,-5*pi/8,-3*pi/4,pi/2,0]
    $ 10 "Wait DI[0]=HI"
    while (get_standard_digital_in(0) == False):
      sync()
    end
    $ 11 "Popup: No hay elementos que impidan la trayectoria. El programa va a comenzar"
    popup("No hay elementos que impidan la trayectoria. El programa va a comenzar", "Message", False, False, blocking=True)
    $ 12 "MoveJ"
    $ 13 "safe_point" "breakAfter"
    set_tcp(p[0.0,0.025,0.175,0.0,0.0,1.5707963267948966])
    movej(safe_point, a=1.3962634015954636, v=1.0471975511965976)
    $ 14 "i≔0"
    global i=0
    $ 15 "Loop i<filas"
    while (i<filas):
      $ 16 "j≔0"
      global j=0
      $ 17 "Loop j<columnas"
      while (j<columnas):
        $ 18 "arriba≔p[-0.25+i*distancia,-0.15+j*distancia,0.95,0,0,0]"
        global arriba=p[-0.25+i*distancia,-0.15+j*distancia,0.95,0,0,0]
        $ 19 "abajo≔p[-0.25+i*distancia,-0.15+j*distancia,1,0,0,0]"
        global abajo=p[-0.25+i*distancia,-0.15+j*distancia,1,0,0,0]
        $ 20 "MoveJ"
        $ 21 "arriba" "breakAfter"
        set_tcp(p[0.05,0.025,0.175,0.0,0.0,1.5707963267948966])
        movej(arriba, a=1.3962634015954636, v=1.0471975511965976)
        $ 22 "desbarbado"
        $ 23 "MoveL"
        $ 24 "abajo" "breakAfter"
        set_tcp(p[0.05,0.025,0.175,0.0,0.0,1.5707963267948966])
        movel(abajo, a=1.2, v=0.25)
        $ 25 "Set DO[0]=On"
        set_standard_digital_out(0, True)
        $ 26 "Wait: 2.5"
        sleep(2.5)
        $ 27 "Set DO[0]=Off"
        set_standard_digital_out(0, False)
        $ 28 "MoveL"
        $ 29 "arriba" "breakAfter"
        set_tcp(p[0.05,0.025,0.175,0.0,0.0,1.5707963267948966])
        movel(arriba, a=1.2, v=0.25)
        $ 30 "pulido"
        $ 31 "MoveL"
        $ 32 "abajo" "breakAfter"
        set_tcp(p[-0.05,0.025,0.175,0.0,0.0,1.5707963267948966])
        movel(abajo, a=1.2, v=0.25)
        $ 33 "Set DO[1]=On"
        set_standard_digital_out(1, True)
        $ 34 "Wait: 1.0"
        sleep(1.0)
        $ 35 "Set DO[1]=Off"
        set_standard_digital_out(1, False)
        $ 36 "MoveL"
        $ 37 "arriba" "breakAfter"
        set_tcp(p[-0.05,0.025,0.175,0.0,0.0,1.5707963267948966])
        movel(arriba, a=1.2, v=0.25)
        $ 38 "j≔j+1"
        global j=j+1
      end
      $ 39 "i≔i+1"
      global i=i+1
    end
    $ 40 "MoveJ"
    $ 41 "safe_point" "breakAfter"
    set_tcp(p[-0.05,0.025,0.175,0.0,0.0,1.5707963267948966])
    movej(safe_point, a=1.3962634015954636, v=1.0471975511965976)
    $ 42 "Popup: El programa ha finalizado"
    popup("El programa ha finalizado", "Message", False, False, blocking=False)
    halt
  end
end
